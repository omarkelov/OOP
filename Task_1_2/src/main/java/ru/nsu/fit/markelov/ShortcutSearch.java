package ru.nsu.fit.markelov;

public class ShortcutSearch implements FloydWarshall {

    private int mMatrix[][];

    /**
     * Creates a new ShortcutSearch for a specified graph.
     * <p>
     * Copies the adjacency matrix of the graph to operate with.
     * The graph's data stays unmodified.
     *
     * @param graph a graph to get the data from
     */
    public ShortcutSearch(Graph graph) {
        // ?????????????????????????????????????????????????????????????????????????????????????????????????????????
        // ?????????????????????????????????????????????????????????????????????????????????????????????????????????
        // ????????????????????????????????? Как бросать исключение в конструкторе ?????????????????????????????????
        // ?????????????????????????????????????????????????????????????????????????????????????????????????????????
        // ?????????????????????????????????????????????????????????????????????????????????????????????????????????
        mMatrix = correctWeights(graph.getWeights().clone());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int getFloydWarshallShortcut(int start, int finish) {
        if (start < 1 || start > mMatrix.length || finish < 1 || finish > mMatrix.length) {
            return -1;
        }

        for (int k = 1; k < this.mMatrix.length; k++) {
            for (int i = 1; i < this.mMatrix.length; i++) {
                for (int j = 1; j < this.mMatrix.length; j++) {
                    this.mMatrix[i][j] = Integer.min(this.mMatrix[i][j], this.mMatrix[i][k] + this.mMatrix[k][j]);
                }
            }
        }

        return (mMatrix[start][finish] != UNREACHABLE_WEIGHT) ? mMatrix[start][finish] : -1;
    }

    private int[][] correctWeights(int[][] m) {
        for (int i = 1; i < m.length; i++) {
            for (int j = 1; j < m.length; j++) {
                if (m[i][j] == 0) {
                    m[i][j] = UNREACHABLE_WEIGHT;
                }
            }
        }

        return m;
    }

    /*public void printGraph() {
        for (int i = 1; i < mMatrix.length; i++) {
            for (int j = 1; j < mMatrix.length; j++) {
                System.out.print(mMatrix[i][j] + " ");
            }
            System.out.println();
        }
    }*/
}
